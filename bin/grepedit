#!/usr/bin/env ruby

# based on the code from Haruo Nanki<nanki@dotswitch.net>
# see http://blog.netswitch.jp/articles/2006/01/26/%E3%82%A2%E3%82%B9%E3%83%9A%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF-2

require 'tempfile'

IDLINE = "# ============================================================ "

AROUND = (ENV["AROUND"] || 4).to_i
EXCLUDEDIRS = (ENV["EXCLUDEDIRS"] || "CVS .svn .git log tmp").split(/\s/)
EDITOR = ENV["EDITOR"] || "vim"

if ARGV.empty?
  puts "Usage: #{File.basename($0)} pattern [options...]"
  exit
end

regions_set = Hash.new{[]}
pattern = ARGV.shift.gsub(/'/, "\\'")
args = ((ARGV.empty? ? ['-r .'] : ARGV) + EXCLUDEDIRS.map{|excludedir| "--exclude-dir=#{excludedir}"}).join(' ')

%x(grep '#{pattern}' #{args} -E -H -n).lines.each do |line|
  next unless /.*:.*:.*/ === line
  filename,lineno = line.split(/:/)
  lineno = [lineno.to_i - AROUND - 1, 0].max
  regions_set[filename] <<= [lineno,lineno + AROUND * 2]
end

if regions_set.empty?
  $stderr.puts "Not found"
  exit
end

# Unify regions.
regions_set.each do |k, regions|
  sorted = regions.sort{|r1, r2| r1.min <=> r2.min}
  regions_set[k] = sorted.inject([sorted.first]) do |r, v|
    if r.last[1] + 1 >= v[0]
      r.last[1] = v[1]
    else
      r << v
    end
    r
  end
end


# Create a temporary file to edit regions_set.
tmp = Tempfile.new("grepedit.tmp.", '.')

regions_set = regions_set.to_a.sort{|e1,e2| e1[0] <=> e2[0]}

regions_set.each do |filename, regions|
  lines = open(filename).readlines
  regions.each do |region|
    tmp.puts "#{IDLINE}#{filename}"
    tmp.puts lines[region[0]..region[1]]
  end
end

# Editor and vim option
editor = EDITOR
if editor.match(/vi/)
  quoted_pattern = pattern.gsub(/"/, %{\\"})
  editor = editor + %{ -b -c "syntax match Underlined '\\v#{quoted_pattern}' display containedin=ALL" -c "/\\v#{quoted_pattern}"}
end

# Launch editor.
now = tmp.mtime
tmp.close
status = system("#{editor} #{tmp.path}")
tmp.open

if !status || now == tmp.mtime
  $stderr.puts "Nothing changed"
  tmp.close!
  exit
end

puts regions_set.map{|filename, regions| filename}.uniq

# Parse the result.
after = Hash.new{[]}

tmp.read.lines.inject("") do |filename, line|
  if /^#{IDLINE}(.*)$/ === line
    after[$1] <<= []
    next $1
  else
    after[filename].last << line
    next filename
  end
end

# Update regions.
regions_set.each do |filename, regions|
  lines = open(filename).readlines
  regions.each do |region|
    # Fill region with nil.
    lines[region[0]..region[1]] = [nil] * (region[1] - region[0] + 1)
    # and put changed lines.
    lines[region[0]] = after[filename].shift
  end
  open(filename, "w"){|file| file.write lines.join.to_s}
end

tmp.close!
