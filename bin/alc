#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'uri'
require 'open-uri'
require 'hpricot'
require 'fileutils'
require 'zlib'

$KCODE='u'

module Config
  class << self
    CONFIG = {}
    def method_missing(id, *a, &b)
      if m = id.to_s.match(/=$/)
        CONFIG[m.pre_match.to_sym] = a.first
      else
        CONFIG[id]
      end
    end
  end
end

module Cache
  CACHE_PATH = File.expand_path("~/.alc_cache")
  FileUtils.mkdir_p(CACHE_PATH)
  class << self
    def cache_file(word)
      File.join(CACHE_PATH, "#{word}.gz")
    end

    def get(word)
      if File.exist?(file = cache_file(word))
        Zlib::GzipReader.open(file).read
      end
    end

    def set(word, raw)
      Zlib::GzipWriter.open(cache_file(word)) do |f|
        f.write(raw)
      end
      raw
    end
  end
end

parser = OptionParser.new
parser.on('-c', '--color', 'show colored results') do
  require 'term/ansicolor'
  include Term
  Config.colored = true
end
parser.on('-y', '--yomi', 'show yomi') do
  Config.yomi = true
end
parser.on('-r', '--refresh', 'refresh a word cache') do
  Config.refresh = true
end
parser.parse!(ARGV)

def puts_with_hilight(text, keyword)
  unless Config.yomi
    text.gsub!(/｛([^｝]+)｝/,'')
  end
  if Config.colored
    text.gsub!(/#{keyword}/i, Term::ANSIColor.red{'\0'})
    text.gsub!(/【([^】]+)】/, Term::ANSIColor.blue{'\0'})
    text.gsub!(/｛([^｝]+)｝/, Term::ANSIColor.cyan{'\0'})
    text.gsub!(/〔([^〕]+)〕/, Term::ANSIColor.cyan{'\0'})
    text.gsub!(/[〜～~＝◆→ ［］・]/, Term::ANSIColor.green{'\0'})
  end
  puts text
end

def show_result(word, midashi, body)
  if Config.colored
    midashi = Term::ANSIColor.bold{midashi}
  end
  puts_with_hilight midashi, word
  puts_with_hilight "\t" + body, word
end

def lookup(word, fuzzy = true)
  if Config.refresh || !(raw = Cache.get(word))
    raw = open("http://eow.alc.co.jp/#{URI.encode(word)}/UTF-8/").read
  end
  results = Hpricot(raw).search("//table/tr/td/ul/div/li")
  if results.size > 0
    Cache.set(word, raw)
    results.each do |li|
      midashi = li.search("span[@class='midashi']").remove.inner_text.strip
      body = li.inner_text.strip
      show_result(word, midashi, body)
    end
  elsif fuzzy
    if m = word.match(/(ed|d|es|s|ing)$/)
      lookup(m.pre_match, false)
    end
  end
end

(ARGV.empty? ? ARGF.read.split : ARGV).each do |word|
  lookup(word)
end
