#!/usr/bin/env bash

COLOR_RESET=$(tput sgr0)
COLOR_RED=$(tput setaf 1)
COLOR_BLUE=$(tput setaf 4)

git_branch_exists() {
  [ "x$(git branch --list "$@")" != "x" ]
}

BRANCH_NAME="${BRANCH_NAME:-$(git symbolic-ref HEAD 2>/dev/null|cut -d '/' -f 3)}"
if [ "x${BRANCH_NAME}" = "x" ]; then
  echo "${COLOR_RED}Please give a branch name to HEAD.${COLOR_RESET}"
  exit 1
fi

REVIEW_BRANCH_NAME="_review_for_${BRANCH_NAME}"

MERGE_BASE="$(git merge-base master HEAD 2>/dev/null)"
if [ "x${MERGE_BASE}" = "x" ]; then
  echo "${COLOR_RED}Fail to find merge-base.${COLOR_RESET}"
  exit 1
fi

echo "${COLOR_BLUE}Current branch:${COLOR_RESET} ${BRANCH_NAME}"
echo "${COLOR_BLUE} Review branch:${COLOR_RESET} ${REVIEW_BRANCH_NAME}"
echo "${COLOR_BLUE}    Merge base:${COLOR_RESET} $(git show -s --oneline "${MERGE_BASE}")"
if git_branch_exists "${REVIEW_BRANCH_NAME}"; then
  echo "${COLOR_BLUE}Commit message:${COLOR_RESET} $(git show -s "${REVIEW_BRANCH_NAME}")"
fi

echo ""
echo "${COLOR_BLUE}Preparing ${REVIEW_BRANCH_NAME}...${COLOR_RESET}"

ORIGINAL_REVIEW_BRANCH_NAME="${REVIEW_BRANCH_NAME}_"

git branch -m "${REVIEW_BRANCH_NAME}" "${ORIGINAL_REVIEW_BRANCH_NAME}" 2>/dev/null
if ! git checkout -b "${REVIEW_BRANCH_NAME}" "${MERGE_BASE}"; then
  git branch -m "${ORIGINAL_REVIEW_BRANCH_NAME}" "${REVIEW_BRANCH_NAME}" 2>/dev/null
  echo "${COLOR_RED}Fail to prepare ${REVIEW_BRANCH_NAME}.${COLOR_RESET}"
  exit 1
fi

echo ""
echo "${COLOR_BLUE}Squash and merge ${BRANCH_NAME}...${COLOR_RESET}"

git merge --squash "${BRANCH_NAME}" || exit 1
if git_branch_exists "${ORIGINAL_REVIEW_BRANCH_NAME}"; then
  git commit -e -c "${ORIGINAL_REVIEW_BRANCH_NAME}" || exit 1
else
  git commit || exit 1
fi

git branch -D "${ORIGINAL_REVIEW_BRANCH_NAME}"

echo ""
echo "${COLOR_BLUE}Ready for git push gerrit HEAD:refs/for/master${COLOR_RESET}"
